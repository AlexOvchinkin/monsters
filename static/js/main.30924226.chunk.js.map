{"version":3,"sources":["components/card/card.js","components/card-list/card.list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","user","id","name","CardList","users","map","key","SearchBox","type","placeholder","aria-label","aria-describedby","onChange","handleSearch","App","search","e","setState","searchText","target","value","state","fetch","then","json","this","filteredUsers","filter","toLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uSAIaA,G,YAAO,SAAAC,GAChB,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,WAAWC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BAC3C,yBAAKJ,UAAU,aACX,uBAAGA,UAAU,cAAb,cACA,wBAAIA,UAAU,aAAaD,EAAMI,KAAKE,UCLzCC,G,MAAW,SAACP,GACrB,OACI,yBAAKC,UAAU,OAEPD,EAAMQ,MAAMC,KAAI,SAAAL,GACZ,OAAO,kBAAC,EAAD,CAAMM,IAAKN,EAAKC,GAAID,KAAMA,UCRxCO,EAAY,SAACX,GACtB,OACI,yBAAKC,UAAU,gCACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,mBAAmBI,GAAG,kBAAtC,YAEJ,2BAAOO,KAAK,OACRX,UAAU,eACVY,YAAY,aACZC,aAAW,WACXC,mBAAiB,iBACjBC,SAAUhB,EAAMiB,iBC6BjBC,E,kDAjCb,aAAe,IAAD,8BACZ,gBAaFC,OAAS,SAACC,GACR,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXjB,MAAO,GACPc,WAAY,IAJF,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAnB,GAAK,OAAIA,EAAMoB,UACpBD,MAAK,SAAAnB,GAAK,OAAI,EAAKa,SAAS,CAAEb,MAAOA,S,+BAOhC,IAAD,EACuBqB,KAAKJ,MAA3BjB,EADD,EACCA,MAAOc,EADR,EACQA,WACTQ,EAAgBtB,EAAMuB,QAAO,SAAA3B,GACjC,OAAoE,IAA7DA,EAAKE,KAAK0B,cAAcb,OAAOG,EAAWU,kBAGnD,OACE,6BACE,kBAAC,EAAD,CAAWf,aAAcY,KAAKV,SAC9B,kBAAC,EAAD,CAAUX,MAAOsB,S,GA7BPG,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.30924226.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.css';\r\n\r\nexport const Card = props => {\r\n    return (\r\n        <div className=\"card m-1\">\r\n            <img className='card-img' alt='monster' src={`https://robohash.org/${props.user.id}?set=set2&size=200x200`}></img>\r\n            <div className=\"card-body\">\r\n                <p className=\"card-title\">User name:</p>\r\n                <h5 className=\"card-text\">{props.user.name}</h5>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Card } from '../card/card';\r\n\r\nimport './card.list.css';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className='row'>\r\n            {\r\n                props.users.map(user => {\r\n                    return <Card key={user.id} user={user} />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport const SearchBox = (props) => {\r\n    return (\r\n        <div className=\"input-group flex-nowrap mt-2\">\r\n            <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\" id=\"addon-wrapping\">Search:</span>\r\n            </div>\r\n            <input type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"search ...\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"addon-wrapping\"\r\n                onChange={props.handleSearch}></input>\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport { CardList } from './components/card-list/card.list';\nimport { SearchBox } from './components/search-box/search-box';\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      searchText: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(users => users.json())\n      .then(users => this.setState({ users: users }));\n  }\n\n  search = (e) => {\n    this.setState({ searchText: e.target.value });\n  }\n\n  render() {\n    const { users, searchText } = this.state;\n    const filteredUsers = users.filter(user => {\n      return user.name.toLowerCase().search(searchText.toLowerCase()) === 0;\n    });\n\n    return (\n      <div>\n        <SearchBox handleSearch={this.search}/>\n        <CardList users={filteredUsers} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}